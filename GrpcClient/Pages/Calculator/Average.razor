@page "/Average"
@implements IDisposable

<PageTitle>Calculate Average</PageTitle>

<h1>Calculate Average</h1>

<p>This component demonstrates fetching Average Result from the GRPC server using Client Streaming</p>

<div>
    <button @onclick="Reset" class="btn-submit">Reset State</button>
    <hr/>
    <input type="number" placeholder="Input Value" @bind-value="@InputValue" />

    @if (!IsResetRequire)
    {
        <button @onclick="AddValue" class="btn-submit">Add Value</button>
    }

    <hr />

    <span>Input Values: </span>
    @foreach (var value in ListValues)
    {
        <span>@value</span>
        <span> </span>
    }

    <hr />

    @if (AverageResult == null)
    {
        <button @onclick="GetAverage" class="btn-submit">Get Average</button>
    }
    else
    {
        <span>Average Result: @AverageResult</span>
        <br/>
        <span>Reset State for Other Calculation</span>
    }
</div>
<hr />


@code {
    [Inject] protected GrpcChannel? channel { get; set; }

    private List<int> ListValues { get; set; } = new();

    private int InputValue { get; set; } = 0;

    private float? AverageResult { get; set; } = null;

    private AsyncClientStreamingCall<GrpcAverageProtobuf.AverageRequest, GrpcAverageProtobuf.AverageResponse> _call { get; set; } = null;

    private GrpcCalculatorProtobuf.Calculator.CalculatorClient _client { get; set; } = null;

    private bool IsResetRequire { get; set; } = false;

    protected override void OnInitialized()
    {
        RegisterClientCall();
        base.OnInitialized();
    }

    private void RegisterClientCall()
    {
        _client = RegisterCalculatorService();

        if (_client != null)
        {
            _call = _client.FindAverage();
        }
    }

    private async Task AddValue()
    {
        await _call.RequestStream.WriteAsync(new GrpcAverageProtobuf.AverageRequest() { Value = InputValue });
        ListValues.Add(InputValue);
    }

    protected async Task GetAverage()
    {
        IsResetRequire = true;
        await _call.RequestStream.CompleteAsync();

        var response = await _call.ResponseAsync;

        AverageResult = response.Result;
    }

    public void Reset()
    {
        DisploseCall();
        RegisterClientCall();
        ListValues = new();
        InputValue = 0;
        AverageResult = null;
        IsResetRequire = false;
    }

    public void DisploseCall()
    {
        if (_call != null)
        {
            _call.Dispose();
        }
    }

    public void Dispose()
    {
        DisploseCall();
    }

    protected GrpcCalculatorProtobuf.Calculator.CalculatorClient RegisterCalculatorService()
    {
        return new GrpcCalculatorProtobuf.Calculator.CalculatorClient(channel);
    }
}