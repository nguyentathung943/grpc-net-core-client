@page "/FetchWeatherGrpc"

<PageTitle>Weather forecast Grpc</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the GRPC server using Unary Request.</p>

<div>
    <button @onclick="GetWeather" class="btn-submit">Send Request</button>
    <hr />
    <span>Time taken: <span class="time">@_stopWatch.ElapsedMilliseconds</span> milliseconds</span>
    <hr />
    <span>Number of Records:</span>
    <span>@(forecasts != null ? @forecasts.Count() : 0)</span>
    <hr />
    <label>Threshold: </label>
    <input type="number" placeholder="Data Limit" @bind-value="@_dataLimit" />
</div>
<hr />

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <VirtualizeComponent WeatherProtobuf="@forecasts" />
}

@code {
    [Inject] protected GrpcChannel? channel { get; set; }

    private List<GrpcWeatherForecastProtobuf.WeatherForecastData> forecasts;

    private Stopwatch _stopWatch = new Stopwatch();

    private int _dataLimit { get; set; } = 100;

    private AsyncUnaryCall<GrpcWeatherForecastProtobuf.WeatherForecastResponse> _call { get; set; } = null;

    private GrpcWeatherForecastProtobuf.WeatherForecast.WeatherForecastClient _client { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        _client = RegisterGrpcWeatherForecastService();
        await GetWeather();

        await base.OnInitializedAsync();
    }

    protected async Task GetWeather()
    {
        try
        {
            ResetState();

            _stopWatch.Start();

            var getWeatherForecastRequest = new GrpcWeatherForecastProtobuf.WeatherForecastRequest() { DataLimit = _dataLimit };

            var response = await _client.ForecastingAsync(getWeatherForecastRequest);
            forecasts = response.WeatherForecastData.ToList();

            // OR
            //_call = _client.ForecastingAsync(getWeatherForecastRequest);
            //var response = await _call.ResponseAsync;
            //forecasts = response.WeatherForecastData.ToList();

            StateHasChanged();

            _stopWatch.Stop();
        }
        catch (RpcException ex)
        {

        }
    }

    private void ResetState()
    {
        forecasts = null;

        _stopWatch.Reset();

        StateHasChanged();
    }

    protected GrpcWeatherForecastProtobuf.WeatherForecast.WeatherForecastClient RegisterGrpcWeatherForecastService()
    {
        return new GrpcWeatherForecastProtobuf.WeatherForecast.WeatherForecastClient(channel);
    }
}