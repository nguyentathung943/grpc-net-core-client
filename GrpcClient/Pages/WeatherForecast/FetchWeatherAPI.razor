@page "/FetchWeatherApi"
@inject HttpClient _http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the API server.</p>


<div>
    <button @onclick="GetForecastData" class="btn-submit">Send Request</button>
    <hr />
    <span>Time taken: <span class="time">@_stopWatch.ElapsedMilliseconds</span> milliseconds</span>
    <hr />
    <label>Threshold: </label>
    <input type="number" placeholder="Data Limit" @bind-value="@_dataLimit" />
    <hr />
    <span>Number of Records:</span>
    <span> @forecasts.Count</span>
</div>
<hr />

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <VirtualizeComponent WeatherModels="@forecasts" />
}

@code {
    private List<WeatherForecast> forecasts = new();

    private Stopwatch _stopWatch = new Stopwatch();

    private int _dataLimit { get; set; } = 100;

    protected override async Task OnInitializedAsync()
    {
        await GetForecastData();
        await base.OnInitializedAsync();
    }

    private async Task GetForecastData()
    {
        ResetState();
        _stopWatch.Start();

        var postBody = Helper.ConverToBodyStringContent(_dataLimit);
        var httpRequest = Helper.CreateHttpRequest("/WeatherForecast");
        httpRequest.Method = HttpMethod.Post;
        httpRequest.Content = postBody;

        var response = await _http.SendAsync(httpRequest);

        var content = await response.Content.ReadAsStringAsync();
        if (!response.IsSuccessStatusCode)
        {
            throw new ApplicationException(content);
        }

        forecasts = JsonSerializer.Deserialize<List<WeatherForecast>>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        _stopWatch.Stop();
    }

    private void ResetState()
    {
        forecasts = new();

        _stopWatch.Reset();

        StateHasChanged();
    }
}
