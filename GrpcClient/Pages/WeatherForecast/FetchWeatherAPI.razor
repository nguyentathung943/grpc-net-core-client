@page "/FetchWeatherApi"
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the API server.</p>


<div>
    <button @onclick="GetForecastData" class="btn-submit">Send Request</button>
    <hr />
    <span>Time taken: <span class="time">@_stopWatch.ElapsedMilliseconds</span> milliseconds</span>
    <hr />
    <label>Threshold: </label>
    <input type="number" placeholder="Data Limit" @bind-value="@_dataLimit" />
    <hr />
    <span>Number of Records:</span>
    <span> @forecasts.Count</span>
</div>
<hr />

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Timestamp</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<WeatherForecast> forecasts = new();

    private Stopwatch _stopWatch = new Stopwatch();

    private int _dataLimit { get; set; } = 100;

    protected override async Task OnInitializedAsync()
    {
        await GetForecastData();
        await base.OnInitializedAsync();
    }

    private async Task GetForecastData()
    {
        ResetState();
         _stopWatch.Start();

        var postBody = ConverToBodyStringContent(_dataLimit);

        var response = await Http.PostAsync("WeatherForecast", postBody);
        var content = await response.Content.ReadAsStringAsync();
        if (!response.IsSuccessStatusCode)
        {
            throw new ApplicationException(content);
        }

        forecasts = JsonSerializer.Deserialize<List<WeatherForecast>>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        _stopWatch.Stop();
    }

    private void ResetState()
    {
        forecasts = new();

        _stopWatch.Reset();

        StateHasChanged();
    }

    public class WeatherForecast
    {
        public string Timestamp { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    private StringContent ConverToBodyStringContent<T>(T model)
    {
        var json = JsonSerializer.Serialize<T>(model);
        var stringContent = new StringContent(json, UnicodeEncoding.UTF8, "application/json");
        return stringContent;
    }
}
