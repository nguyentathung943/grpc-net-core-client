@page "/FetchWeatherGrpcStream"
@implements IDisposable

<PageTitle>Weather forecast Grpc</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the GRPC server using Server Streaming</p>

<div>
    <button @onclick="GetWeather" class="btn-submit">Send Request</button>
    <hr />
    <span>Number of Records:</span>
    <span> @forecasts.Count</span>
    <hr />
    <span>Time taken: <span class="time">@_stopWatch.ElapsedMilliseconds</span> milliseconds</span>
    <hr />
    <label>Threshold: </label>
    <input type="number" placeholder="Data Limit" @bind-value="@_dataLimit" />
</div>
<hr />

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (forecasts == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <VirtualizeComponent WeatherProtobuf="@forecasts" />
    }
}

@code {
    [Inject] protected GrpcChannel? channel { get; set; }

    private List<GrpcWeatherForecastProtobuf.WeatherForecastData> forecasts = new();

    private Stopwatch _stopWatch = new Stopwatch();

    private int _dataLimit { get; set; } = 100;

    private AsyncServerStreamingCall<GrpcWeatherForecastProtobuf.WeatherForecastData> _call { get; set; } = null;

    private GrpcWeatherForecastProtobuf.WeatherForecast.WeatherForecastClient _client { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        _client = RegisterGrpcWeatherForecastService();
        await GetWeather();

        await base.OnInitializedAsync();
    }

    protected async Task GetWeather()
    {
        try
        {
            ResetState();

            _stopWatch.Start();

            var getWeatherForecastRequest = new GrpcWeatherForecastProtobuf.WeatherForecastRequest() { DataLimit = _dataLimit };

            _call = _client.ForecastStreaming(getWeatherForecastRequest);

            await foreach (var response in _call.ResponseStream.ReadAllAsync())
            {
                forecasts.Add(new GrpcWeatherForecastProtobuf.WeatherForecastData()
                    {
                        Summary = response.Summary,
                        TemperatureC = response.TemperatureC,
                        TemperatureF = response.TemperatureF,
                        Timestamp = response.Timestamp
                    });

                StateHasChanged();
            }

            _stopWatch.Stop();
        }
        catch (RpcException ex)
        {

        }
    }

    private void ResetState()
    {
        DisploseCall();

        forecasts = new();

        _stopWatch.Reset();

        StateHasChanged();
    }

    public void DisploseCall()
    {
        if (_call != null)
        {
            _call.Dispose();
        }
    }

    public void Dispose()
    {
        DisploseCall();
    }

    protected GrpcWeatherForecastProtobuf.WeatherForecast.WeatherForecastClient RegisterGrpcWeatherForecastService()
    {
        return new GrpcWeatherForecastProtobuf.WeatherForecast.WeatherForecastClient(channel);
    }
}