@page "/FetchWeatherGrpcStream"

<PageTitle>Weather forecast Grpc</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the GRPC server using Server Streaming</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Timestamp</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Inject] protected GrpcChannel? channel { get; set; }

    private List<GrpcWeatherForecastProtobuf.WeatherForecastData> forecasts = new();

    protected override async Task OnInitializedAsync()
    {
        await GetWeather();

        await base.OnInitializedAsync();
    }

    protected async Task GetWeather()
    {
        var client = RegisterGrpcGreeterService();

        var getWeatherForecastRequest = new GrpcWeatherForecastProtobuf.WeatherForecastRequest() { ChunkLimit = 20 };

        using (var call = client.ForecastStreaming(getWeatherForecastRequest))
        {
            await foreach (var response in call.ResponseStream.ReadAllAsync())
            {
                forecasts.Add(
                    new GrpcWeatherForecastProtobuf.WeatherForecastData()
                    {
                        Summary = response.Summary,
                        TemperatureC = response.TemperatureC,
                        TemperatureF = response.TemperatureF,
                        Timestamp = response.Timestamp
                    }
                );

                StateHasChanged();
            }
        }
    }


    protected GrpcWeatherForecastProtobuf.WeatherForecast.WeatherForecastClient RegisterGrpcGreeterService()
    {
        return new GrpcWeatherForecastProtobuf.WeatherForecast.WeatherForecastClient(channel);
    }
}